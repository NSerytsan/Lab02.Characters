@typeparam TItem
<div style=@Style>
    @if (Data != null)
    {
        foreach (var item in Data)
        {
            var Text = TextField?.Invoke(item);
            var Value = ValueField?.Invoke(item).ToString();
            bool Checked = false;
            if (Value != null && SelectedValues.Contains(Value))
            {
                Checked = true;
            }
            <div class="col-md-auto">
                <input type="checkbox" checked=@Checked @onchange="eventArgs => { CheckboxClicked(Value, eventArgs.Value); }" />  @Text
            </div>
        }
    }
    @ChildContent
</div>

@code {
    //Data for the Checkbox
    [Parameter]
    public IEnumerable<TItem> Data { get; set; } = null!;
    // The field to be shown adjacent to checkbox
    [Parameter]
    public Func<TItem, string> TextField { get; set; } = null!;
    // The Value which checkbox will return when checked
    [Parameter]
    public Func<TItem, object> ValueField { get; set; } = null!;
    // CSS Style for the Checkbox container
    [Parameter]
    public string Style { get; set; } = string.Empty;
    // Any childd content for the control (if needed)
    [Parameter]
    public RenderFragment ChildContent { get; set; } = null!;
    // The array which contains the list of selected checkboxs
    [Parameter]
    public List<string> SelectedValues { get; set; } = new List<string>();

    //Method to update the selected value on click on checkbox
    public void CheckboxClicked(string aSelectedId, object aChecked)
    {
        if ((bool)aChecked)
        {
            if (!SelectedValues.Contains(aSelectedId))
            {
                SelectedValues.Add(aSelectedId);
            }
        }
        else
        {
            if (SelectedValues.Contains(aSelectedId))
            {
                SelectedValues.Remove(aSelectedId);
            }
        }
        StateHasChanged();
    }
}