@page "/character/create"
@using Models.Dtos.Character
@using Models.Dtos.Weapon
@inject ICharacterService _characterService
@inject NavigationManager _navigationManager
@inject IWeaponService _weaponService

<div class="row my-2">
    <h3 class="card-title text-primary mb-3 ml-3">@Title Зброю</h3>

    <div class="col-md-10">
        <EditForm Model="Character" OnValidSubmit="CreateWeapon">
            <DataAnnotationsValidator />
            <div class="form-group">
                <label class="col-form-label">Ім'я</label>
                <InputText @bind-Value="Character.Name" class="form-control"></InputText>
                <ValidationMessage For="()=>Character.Name"></ValidationMessage>
            </div>
            <div class="form-group">
                <label class="col-form-label">Тип</label>
                <InputSelect @bind-Value="Character.WeaponId" class="form-control">
                    <option value="0">Виберіть зброю</option>
                    @foreach (var weapon in Weapons)
                    {
                        <option value="@weapon.Id">@weapon.Name</option>
                    }
                </InputSelect>
                <ValidationMessage For="()=>Character.WeaponId"></ValidationMessage>
            </div>
            <div class="form-group py-2">
                <button class="btn btn-primary">@Title</button>
                <NavLink href="weapon" class="btn btn-secondary">До списку</NavLink>
            </div>
        </EditForm>
    </div>
</div>

@code
{
    private string Title { get; set; } = "Створити";
    private CreateCharacterDto Character { get; set; } = new();
    private IEnumerable<WeaponDto> Weapons { get; set; } = new List<WeaponDto>();

    protected override async Task OnInitializedAsync()
    {
        Weapons = (await _weaponService.GetAllAsync()).ToList();
    }

    private async Task CreateWeapon()
    {
        await _characterService.AddAsync(Character);
        _navigationManager.NavigateTo("weapon");
    }
}